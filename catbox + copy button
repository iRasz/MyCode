case 'tourl': {
  const FormData = require("form-data");
  const { fromBuffer } = require("file-type");
  const fakeUserAgent = require("fake-useragent");
  const { filesize } = require('filesize');

  let q = m.quoted ? m.quoted : m;
  let mime = (q.msg || q).mimetype || '';

  const createFormData = (content, fieldName, ext) => {
    const { mime } = fromBuffer(content) || {};
    const formData = new FormData();
    formData.append(fieldName, content, `${new Date()}.${ext}`);
    return formData;
  };

  const catbox = async (content) => {
    try {
      const { ext, mime } = (await fromBuffer(content)) || {};
      const formData = createFormData(content, "fileToUpload", ext);
      formData.append("reqtype", "fileupload");
      const response = await fetch("https://catbox.moe/user/api.php", {
        method: "POST",
        body: formData,
        headers: {
          "User-Agent": fakeUserAgent(),
        },
      });
      return await response.text();
    } catch (error) {
      throw false;
    }
  }

  if (!mime) return m.reply('reply media!');
  m.reply("Mohon Tunggu Sebentar...");
  
  let media = await q.download();
  let link = await catbox(media);
  let size = await fetch(link);
  size = await size.text();
  size = await filesize(size.length);
  
  let caption = `*SUCCES UPLOAD A FILE*\n\nðŸ”— *L I N K :* ${link} !\nðŸ“Š *S I Z E :* ${size} Byte`;

  // Bagian penting yang ditambahkan
  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: ''
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: link } }, { upload: conn.waUploadToServer })),
                    title: '',
                    subtitle: `${m.pushName}`,
                    hasMediaAttachment: false
                  }),
                  body: {
                    text: caption
                  },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_url",
                        "buttonParamsJson": `{"display_text":"preview media!","url":"${link}"}`
                      },
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{"display_text": "copy url!","copy_code": "${link}"}`
                      }
                    ]
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: m }
  );

  conn.relayMessage(m.chat, msg.message, { messageId: msg.key.id });
  await fs.unlinkSync(media);
}
break;
